class MutcIO;

classtype int;

use ArrayArith: { +, sel, <, tod};
use ArrayBasics: { dim, shape};
use String: { string};

#ifdef SAC_BACKEND_MUTC

export { MutcIO, FibrePrint, print, mutcWorld, 
           FibreScanIntArray, FibreScanDoubleArray, FibreScanFloatArray};

objdef MutcIO mutcWorld = to_MutcIO( 0);

external void svp_io_puts( string a);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

external void svp_io_putf( double d, int places, int base);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

external void sac_svp_io_putn( int num, int base);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

external int[*] read_int( );
#pragma effect MutcIO::mutcWorld         
#pragma linkobj "src/MutcIO/read.o"             
#pragma linksign[1] 
#pragma refcounting[0] 

external float[*] read_float( );
#pragma effect MutcIO::mutcWorld         
#pragma linkobj "src/MutcIO/read.o"             
#pragma linksign[1]                    
#pragma refcounting[0] 

external double[*] read_double( );
#pragma effect MutcIO::mutcWorld         
#pragma linkobj "src/MutcIO/read.o"             
#pragma linksign[1]                    
#pragma refcounting[0] 

#define UNTYPEDOUT( type)                                            \
inline                                                               \
void print( type[*] array){                                          \
  print(array, 0);                                                   \
}                                                                    \
                                                                     \
inline                                                               \
void FibrePrint( type[+] array){                                     \
  FibrePrint( array, 0);                                             \
}                                                                    \
                                                                     \
inline                                                               \
void FibrePrint( type scaler){                                       \
  FibrePrint( scaler, 0);                                            \
}                                                                    \
                                                                     \
inline                                                               \
void FibrePrint( type scaler, int indent){                           \
  print( scaler, indent);                                            \
}                                                                    \
                                                                     \
inline                                                               \
void print( type scaler, int indent){                                \
  print( scaler, indent, true);                                      \
}                                                                    \
                                                                     \
inline                                                               \
void print( type[+] array, int indent){                              \
  indent(indent);                                                    \
  svp_io_puts("[\n");                                                \
                                                                     \
  for ( i=0; i < shape(array)[0]; i++){                              \
    print( array[i], indent + 1);                                    \
  }                                                                  \
                                                                     \
  indent(indent);                                                    \
  svp_io_puts("]\n");                                                \
}                                                                    \
                                                                     \
inline                                                               \
void FibrePrint( type[+] array, int indent){                         \
  indent( indent);                                                   \
  svp_io_puts( "[1,");                                               \
  sac_svp_io_putn( shape(array)[0], 10);                             \
  svp_io_puts( ":\n");                                               \
                                                                     \
  for (i=0; i< shape(array)[0]; i++){                                \
    FibrePrint( array[i], indent+1);                                 \
  }                                                                  \
                                                                     \
  indent( indent);                                                   \
  svp_io_puts( "]\n");                                               \
}                                                                    

#define UNTYPEDIN( type, name)                                       \
type[*] FibreScan##name##Array( ){                                   \
  return( read_##type( ));                                           \
}

#define UNTYPED( type, name) UNTYPEDIN( type, name) UNTYPEDOUT( type)

UNTYPED( int, Int)
UNTYPED( double, Double)
UNTYPED( float, Float)

UNTYPEDOUT( bool)

inline
void print( int scaler, int indent, bool nl){
  indent( indent);
  sac_svp_io_putn( scaler, 10);
  nl( nl);
}

inline
void print( float scaler, int indent, bool nl){
  indent( indent);
  svp_io_putf( tod( scaler), 16, 10);
  nl( nl);
}

inline
void print( double scaler, int indent, bool nl){
  indent( indent);
  svp_io_putf( scaler, 16, 10);
  nl( nl);
}

inline
void print( bool scaler, int indent, bool nl){
  if ( scaler){
    print( "TRUE", indent, nl);
  } else {
    print( "FALSE", indent, nl);
  }
}

inline
void print( string scaler, int indent, bool nl){
  indent( indent);
  svp_io_puts( scaler);
  nl( nl);
}

inline
void FibrePrint(string scaler){
  print(scaler,0,true);
}

inline
void nl( bool nl){
  if ( nl){
    print( "\n");
  }
}

/*
 * Special cases where arrays of type are not supported
 */
inline
void print( string scaler, int indent){
  print( scaler, indent, false);
}

inline 
void print( string scaler){
  print( scaler, 0);
}

/* 
 * Indent [indent] amount
 */
inline
void indent( int indent){
  for ( i=0; i<indent; i++){
    svp_io_puts("  ");
  }
}

#endif
