class MutcIO;

classtype int;

use ArrayArith: { ==, +, sel, <};
use ArrayBasics: { dim, shape};

export { print, mutcWorld};

objdef MutcIO mutcWorld = to_MutcIO( 0);

external void svp_io_puts( String::string a);
#pragma effect MutcIO::mutcWorld

external void svp_io_putf( double d, int places, int base);
#pragma effect MutcIO::mutcWorld

inline
void print( double[*] array){
  print(array, 0);
}

inline
void print( double[*] array, int indent){
  if ( dim( array) == 0){
    indent( indent);
    svp_io_putf( array, 16, 10);
    svp_io_puts( "\n");
  } else {
    indent(indent);
    svp_io_puts("[\n");
  
    for ( i=0; i < shape(array)[0]; i++){
      print( array[i], indent + 1);
    }

    indent(indent);
    svp_io_puts("]\n");
  }
}

inline
void indent( int indent){
  for ( i=0; i<indent; i++){
    svp_io_puts("  ");
  }
}
