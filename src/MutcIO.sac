class MutcIO;

classtype int;

use ArrayArith: { +, sel, <};
use ArrayBasics: { dim, shape};

export { FibrePrint, print, mutcWorld};

objdef MutcIO mutcWorld = to_MutcIO( 0);

external void svp_io_puts( String::string a);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

external void svp_io_putf( double d, int places, int base);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

external void sac_svp_io_putn( int num, int base);
#pragma effect MutcIO::mutcWorld
#pragma mutcthreadfun

#define UNTYPED( type)                                                \
inline                                                                \
void print( type[*] array){                                           \
  print(array, 0);                                                    \
}                                                                     \
                                                                      \
inline                                                                \
void FibrePrint( type[+] array){                                      \
  FibrePrint( array, 0);                                              \
}                                                                     \
                                                                      \
inline                                                                \
void FibrePrint( type scaler){                                        \
  FibrePrint( scaler, 0);                                             \
}                                                                     \
                                                                      \
inline                                                                \
void FibrePrint( type scaler, int indent){                            \
  print( scaler, indent);                                             \
}                                                                     \
                                                                      \
inline                                                                \
void print( type[+] array, int indent){                               \
  indent(indent);                                                     \
  svp_io_puts("[\n");                                                 \
                                                                      \
  for ( i=0; i < shape(array)[0]; i++){                               \
    print( array[i], indent + 1);                                     \
  }                                                                   \
                                                                      \
  indent(indent);                                                     \
  svp_io_puts("]\n");                                                 \
}                                                                     \
                                                                      \
inline                                                                \
void FibrePrint( type[+] array, int indent){                          \
  indent( indent);                                                    \
  svp_io_puts( "[1,");                                                \
  sac_svp_io_putn( shape(array)[0], 10);                              \
  svp_io_puts( ":\n");                                                \
                                                                      \
  for (i=0; i< shape(array)[0]; i++){                                 \
    FibrePrint( array[i], indent+1);                                  \
  }                                                                   \
                                                                      \
  indent( indent);                                                    \
  svp_io_puts( "]\n");                                                \
}                                                                     

UNTYPED( int)
UNTYPED( double)

inline
void print( int scaler, int indent){
  indent( indent);
  sac_svp_io_putn( scaler, 10);
  svp_io_puts( "\n");
}

inline
void print( double scaler, int indent){
  indent( indent);
  svp_io_putf( scaler, 16, 10);
  svp_io_puts( "\n");
}

inline
void indent( int indent){
  for ( i=0; i<indent; i++){
    svp_io_puts("  ");
  }
}
